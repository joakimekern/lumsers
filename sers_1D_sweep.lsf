# ===========
# Script to extract the relevant results of a waveguide as one or more variables are sweeped
# The sweep properties can be set under 'Sweep parameters'
# The injection axis is assumed to be x, the height of the waveguide is assumed to be in z, and the width in y
# ===========
clear;

#==================
# Input parameters
#==================

selected_mode = "mode1";
pump_lambda = 785e-9;
stokes_lambda = 877e-9;
include_stokes = false;    # If the Stokes shift should be included. Slightly more accurate, twice as slow
cladding_index = 1;        # Air
#cladding_index = 1.538;    # NTP
index_margin = 0.01;

# Geometry
injection_axis = "x";   # Not used
width_axis = "y";
height_axis = "z";

# Surface. Define the number of mesh cells in x and y which define the surface of the wg structure
meshcells_x = 10;
meshcells_y = 10;

# Sweep parameters
parameter_name = "wg_width";
parameter_scope = "::model";
#parameter_values = linspace(350, 700, 36) * 1e-9;    # Increment: 10
parameter_values = [500] * 1e-9;

# Save results
save_to_json = false;
savename = "test.json";

#==================
# Functions
#==================

# A filter seperating out the bulk region of interest
function bulk_filter(n_reg_interest, n_margin){
    # Get the refractive index and the axis lengths
    ri = real(pinch(getdata("FDE::data::material","index_x")));
    dim = size(ri);
    x = dim(1);
    y = dim(2);
    # Create the matrix to compare with the refractive index    
    background_matrix = ones(x, y) * n_reg_interest;
    
    # Create the filter. 
    # All grid points with an index value equal (almost) to the background index is set to 1.
    # All other points are set to 0.
    filter = almostequal(ri, background_matrix, n_margin, n_margin);

    return filter;
}

function shift_matrix(m, num, direction){
    # Get the dimensions of the original matrix
    dim = size(m);
    x = dim(1);
    y = dim(2);
    # Create a new matrix
    m2 = ones(x, y);
    
    # Shift the old matrix
    if(direction == "up"){
        m2(1:x, num+1:y) = m(1:x, 1:y-num);
    }
    else if(direction == "left"){
        m2(1:x-num, 1:y) = m(num+1:x, 1:y);
    }
    else if(direction == "right"){
        m2(num+1:x, 1:y) = m(1:x-num, 1:y);
    }
    else if(direction == "down"){
        m2(1:x, 1:y-num+1) = m(1:x, num:y);
    }
    else {return 0;}
    
    # Invert the matrix and return. This ensures the new edges are 0
    m2 = m2 == 0;
    return m2;
}

# Create a surface filter in a region of interest. The surface is defined by 'xshift' number of mesh cells horizontally,
# and 'yshift' number of mesh cells vertically
function surface_filter(n_reg_interest, n_marg, xshift, yshift){
    # Initialize a filter seperating out the region of interest
    mask = bulk_filter(n_reg_interest, n_marg);
    
    # Make masks shifting the filter in four directions
    topmask = shift_matrix(mask, yshift, "up");
    rightmask = shift_matrix(mask, xshift, "right");
    leftmask = shift_matrix(mask, xshift, "left");
    downmask = shift_matrix(mask, yshift, "down");
    # Combine the shifted masks
    ormask = topmask + rightmask + leftmask + downmask;
    # Do boolean operations to create the final mask
    #final = mask * ormask;
    #final = final != 0;
    f1 = ormask != 4;
    f2 = ormask != 0;
    final = f1 * f2;    
    
    return final * mask;  
}

# A filter only containing the slot. Not implemented
function slot_filter(n_reg_interest){
    return 0;
}

# Function to get the inverse effective mode area of a given mode. x and y are the cross-section axes
function get_inv_eff_mode_area(mode, x, y){
    # Get the electric field amplitude
    Enorm2 = pinch(getelectric("FDE::data::" + mode));
    # Calculate the permittivity from the RI
    index = getdata("FDE::data::material", "index_z");
    permittivity = sqrt(real(pinch(index)));
    
    # Get |E|^2 times the permittivity (epsilon) at each grid point and integrate
    # to get the total charge
    charge = Enorm2 * permittivity;
    charge = integrate(charge, [1, 2], x, y);
   
    return Enorm2 / charge;
}

# Returns the integrated luminosity of a given mode. Both the pump and Stokes shift can be taken
# into account, in which case 1 denotes pump and 2 denotes Stokes. area is the inverse effective
# mode area. area1 and area2 should be cross-sections over the same area, and are thus integratable
function get_integrated_luminosity(area1, area2, lambda2, ng1, ng2, n2){
    # Initialize the constants    
    kv = 1.26e23;    
    constants = pi^2 / eps0^2 / kv;
    ref_indices = ng1 * ng2 / n2;
    
    return constants * ref_indices * lambda2^2 * area1 * area2;
}

function get_integrated_luminosity_noconst(area1, area2, filter, x, y){
    lum = integrate(area1 * area2 * filter, 1:2, x, y);
    return lum;
}

function get_int_lum_constants(mode){
    loss = getdata("FDE::data::" + mode, "loss");
    ng = real(getdata("FDE::data::" + mode, "ng"));
    neff = real(getdata("FDE::data::" + mode, "neff"));
    
    constants = [loss, ng, neff];
    return {"loss": loss, "ng": ng, "neff": neff};
}

# Function to simply calculate the Dhakal prefactor, as it depends on whether or not the Stokes
# shift is taken into consideration
function dhakal_factor(ng1, ng2, neff1, neff2, l_p, l_s){
    if(ng2 == 0){
        ng2 = ng1;
        neff2 = neff1;
        l_s = l_p;
    }
    return ng1 * ng2 * l_s^2 / neff2;
}

# Given a parameter and its value, set it and calculate the number of modes. The wavelength
# must be specified as well
function set_and_run(scope, name, value, wavelength){
    # Set the new parameter
    switchtolayout;
    setnamed(scope, name, value);
    setanalysis("wavelength", wavelength);
    # Run
    run;
    n = findmodes;
    
    return n;
}

function calculate_results(mode, xaxis, yaxis, n_clad, n_marg, shiftx, shifty, use_stokes, lambda_p, lambda_s){
    # Get the cross section
        x = pinch(getdata("FDE::data::material",xaxis));
        y = pinch(getdata("FDE::data::material",yaxis));
        # Make the filter    
        filter_bulk = bulk_filter(n_clad, n_marg);    
        filter_surf = surface_filter(1, n_marg, shiftx, shifty);    # Always uses 1, air. When considering NTP, it is better to use bulk filter
        
        # Get the constants
        constants_p = get_int_lum_constants(mode);  # [loss, group index, effective index]
        constants_s = matrix(3);
        
        # Get the mode area
        area_pump = get_inv_eff_mode_area(mode, x, y);
        area_stokes = area_pump; # Initialize
        
        if(use_stokes){
            # Find modes at the Stokes wavelength
            switchtolayout;
            setanalysis("wavelength", lambda_s);
            run;
            n_modes_stokes = findmodes;
            
            # If the mode exists, save the Stokes constants
            if(n_modes_stokes != 0){
                constants_s = get_int_lum_constants(mode);
                # Update the Stokes mode area
                area_s = get_inv_eff_mode_area(mode, x, y);
            }
        } else {
            n_modes_stokes = 0;
        }
        
        # Calculate the integrated luminosity
        lum_bulk_p = integrate(area_pump^2 * filter_bulk, 1:2, x, y);
        lum_surf_p = integrate(area_pump^2 * filter_surf, 1:2, x, y);
        if (use_stokes){
            lum_bulk_s = integrate(area_pump * area_stokes * filter_bulk, 1:2, x, y);
            lum_surf_s = integrate(area_pump * area_stokes * filter_surf, 1:2, x, y);
        } else {
            lum_bulk_s = 0;
            lum_surf_s = 0;
        }
        
        return [lum_bulk_p; lum_surf_p; lum_bulk_s; lum_surf_s; constants_p.loss; constants_p.ng; constants_p.neff; constants_s(1); constants_s(2); constants_s(3); n_modes_stokes];
}

#==================
# Script
#==================

n_val = length(parameter_values);
# Array to store the sweep results
ce = matrix(n_val);
integrated_luminosity_bulk = matrix(n_val);
integrated_luminosity_surf = matrix(n_val);
# Arrays to store the loss, group index, and effective index at the pump and Stokes wavelength
loss_p = matrix(n_val);
loss_s = matrix(n_val);
ng_p = matrix(n_val);
ng_s = matrix(n_val);
neff_p = matrix(n_val);
neff_s = matrix(n_val);
n_modes_p = matrix(n_val);
n_modes_s = matrix(n_val);

# Initialize the constant used in Dhakal et al.
kv = 1.26e23;    
dhakal_const = pi^2 / eps0^2 / kv;

# Run the sweep
for(i=1; i <= n_val; i=i+1){
#for(i=1; i <= 0; i=i+1){ # Stop the loop from starting, for debugging
    ?"Now analysing parameter '" + parameter_name + "' with value '" + num2str(parameter_values(i)) + "'";
    # Set the new parameter
    n_modes_p(i) = set_and_run(parameter_scope, parameter_name, parameter_values(i), pump_lambda);
    
    # If no modes are found, do not throw error, simply append 0. This keeps the script running
    if(n_modes_p(i) != 0){
        
        # Calculate and store the results
        res = calculate_results(selected_mode, width_axis, height_axis, cladding_index, index_margin, meshcells_x, meshcells_y, include_stokes, pump_lambda, stokes_lambda);        
        loss_p(i) = res(5);
        loss_s(i) = res(8);
        ng_p(i) = res(6);
        ng_s(i) = res(9);
        neff_p(i) = res(7);
        neff_s(i) = res(10);
        n_modes_s(i) = res(11);
        
        # Calculate the conversion efficiency as in Dhakal
        if (include_stokes){
            integrated_luminosity_bulk(i) = res(3);
            integrated_luminosity_surf(i) = res(4);
            factor = dhakal_const * dhakal_factor(ng_p(i), ng_s(i), neff_p(i), neff_s(i), pump_lambda, stokes_lambda);
        } else {
            integrated_luminosity_bulk(i) = res(1);
            integrated_luminosity_surf(i) = res(2);
            factor = dhakal_const * dhakal_factor(ng_p(i), ng_p(i), neff_p(i), neff_p(i), pump_lambda, pump_lambda);
        }
        
        ce(i) = factor * integrated_luminosity_bulk(i);      

        # Save for each iteration
        if(save_to_json){
               jsonsave(savename, parameter_name, parameter_values, ce, integrated_luminosity_bulk, integrated_luminosity_surf, loss_p, ng_p, neff_p, loss_s, ng_s, neff_s, n_modes_p, n_modes_s, pump_lambda, stokes_lambda, dhakal_const, cladding_index);
        }
    }
}

# Plot results
plot(parameter_values, ce);
